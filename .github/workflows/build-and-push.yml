name: build and push

on:
  push:

jobs:
  run-linter-and-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install npm packages
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm run test:ci

      - name: Run integration tests
        run: npm run test:integration:ci

  build-docker:
    runs-on: ubuntu-latest
    outputs:
      branch_name: '${{steps.extract_branch.outputs.branch}}'
      app_env: '${{steps.set_app_vars.outputs.app_env}}'
    steps:
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-' )"
        id: extract_branch

      - name: Set app_env var
        id: set_app_vars
        run: |
          if [[ "${{github.ref}}" == "refs/heads/prod" ]]; then
              echo "::set-output name=app_env::production"
          else
              echo "::set-output name=app_env::staging"
          fi

      - name: Build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile-prod
          push: false
          tags: etcaterva/echaloasuerte:${{ steps.extract_branch.outputs.branch }}
          build-args: |
            commit_sha=${{ github.sha }}
            app_env=${{ steps.set_app_vars.outputs.app_env }}
            sentry_auth_token=${{ secrets.SENTRY_AUTH_TOKEN }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  push-docker:
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    needs:
      - build-docker
      - run-linter-and-tests
    steps:
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile-prod
          push: true
          tags: etcaterva/echaloasuerte:${{ needs.build-docker.outputs.branch_name }}
          build-args: |
            commit_sha=${{ github.sha }}
            app_env=${{ needs.build-docker.outputs.app_env }}
            sentry_auth_token=${{ secrets.SENTRY_AUTH_TOKEN }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs:
      - build-docker
      - push-docker
    steps:
      - name: Invoke deployment workflow
        uses: benc-uk/workflow-dispatch@4c044c1613fabbe5250deadc65452d54c4ad4fc7
        with:
          workflow: Manually triggered workflow for deployment
          repo: etcaterva/deployment
          token: ${{ secrets.AUTOMATION_TOKEN }}
          inputs: '{ "tags": "cd-frontend" }'

      - name: Deployment URL
        id: set_vars
        run: |
          echo "Follow deployment jobs for this branch:"
          echo "- https://github.com/etcaterva/deployment/actions?query=branch%3A${{ needs.build-docker.outputs.branch_name }}"

name: build and push

on:
  push:

jobs:
  npm-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install npm packages
        run: npm ci

      - name: Run lint tests
        run: npm run lint

      - name: Run ci tests
        run: npm run test:ci

      - name: Run integration tests
        run: npm run test:integration:ci

  build-docker:
    runs-on: ubuntu-latest
    outputs:
      branch_name: '${{steps.extract_branch.outputs.branch}}'
      app_env: '${{steps.set_app_vars.outputs.app_env}}'
      ansible_hosts: '${{steps.set_app_vars.outputs.hosts_file}}'
      deployment_branch_name: '${{steps.set_app_vars.outputs.deployment_branch_name}}'
    steps:
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-' )"
        id: extract_branch

      - name: Set app_env var
        id: set_app_vars
        run: |
          if [[ "${{github.ref}}" == "refs/heads/prod" ]]; then
              echo "::set-output name=app_env::production"
              echo "::set-output name=hosts_file::hosts_prod"
              echo "::set-output name=deployment_branch_name::prod"
          else
              echo "::set-output name=app_env::staging"
              echo "::set-output name=hosts_file::hosts_dev"
              echo "::set-output name=deployment_branch_name::master"
          fi

      - name: Build container
        uses: .github/actions/docker-build-push
        with:
          push: false
          app_env: ${{ needs.build-docker.outputs.app_env }}
          tag: ${{ steps.extract_branch.outputs.branch }}

  push-docker:
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    needs:
      - build-docker
      - npm-ci
    steps:
      - name: Push container
        uses: .github/actions/docker-build-push
        with:
          push: true
          app_env: ${{ needs.build-docker.outputs.app_env }}
          tag: ${{ needs.build-docker.outputs.branch_name }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs:
      - build-docker
      - push-docker

    steps:
      - uses: actions/checkout@v2
        with:
          repository: etcaterva/deployment
          submodules: true
          ref: ${{ needs.build-docker.outputs.deployment_branch }}

      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==2.9.2 requests

      - name: set ansible config secrets
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password

      - name: Load ssh key
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.AUTOMATION_SSH_KEY }}

      - name: run playbook
        run: |
          ansible-playbook -i ${{ needs.build-docker.outputs.ansible_hosts }} config-eas3.yml \
            --vault-password-file .ansible-vault-password \
            --tags "cd-frontend" \
            --extra-vars "ansible_user=automation"
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'

/**
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DrawTossPayload from '../model/DrawTossPayload';
import Raffle from '../model/Raffle';

/**
* Raffle service.
* @module api/RaffleApi
* @version v1
*/
export default class RaffleApi {

    /**
    * Constructs a new RaffleApi. 
    * @alias module:api/RaffleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 
     * @param {module:model/Raffle} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Raffle} and HTTP response
     */
    raffleCreateWithHttpInfo(data) {
      let postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling raffleCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Raffle;

      return this.apiClient.callApi(
        '/raffle/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {module:model/Raffle} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Raffle}
     */
    raffleCreate(data) {
      return this.raffleCreateWithHttpInfo(data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id A unique value identifying this raffle.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Raffle} and HTTP response
     */
    raffleReadWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling raffleRead");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Raffle;

      return this.apiClient.callApi(
        '/raffle/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id A unique value identifying this raffle.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Raffle}
     */
    raffleRead(id) {
      return this.raffleReadWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} id A unique value identifying this raffle.
     * @param {module:model/DrawTossPayload} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DrawTossPayload} and HTTP response
     */
    raffleTossWithHttpInfo(id, data) {
      let postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling raffleToss");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling raffleToss");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DrawTossPayload;

      return this.apiClient.callApi(
        '/raffle/{id}/toss/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} id A unique value identifying this raffle.
     * @param {module:model/DrawTossPayload} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DrawTossPayload}
     */
    raffleToss(id, data) {
      return this.raffleTossWithHttpInfo(id, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

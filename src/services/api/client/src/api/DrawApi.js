/**
 * Echalo A Suerte
 * API definition for EAS web services
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mariocj89@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RandomNumber from '../model/RandomNumber';

/**
* Draw service.
* @module api/DrawApi
* @version 1.0.0
*/
export default class DrawApi {

    /**
    * Constructs a new DrawApi. 
    * @alias module:api/DrawApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a new draw
     * Creates a new draw of type random_numer
     * @param {module:model/RandomNumber} body Draw object to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RandomNumber} and HTTP response
     */
    createRandomNumberWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRandomNumber");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RandomNumber;

      return this.apiClient.callApi(
        '/random_number', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new draw
     * Creates a new draw of type random_numer
     * @param {module:model/RandomNumber} body Draw object to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RandomNumber}
     */
    createRandomNumber(body) {
      return this.createRandomNumberWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find draw by private or public id
     * Returns a single draw
     * @param {String} id_ ID of draw to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RandomNumber} and HTTP response
     */
    getRandomNumberWithHttpInfo(id_) {
      let postBody = null;

      // verify the required parameter 'id_' is set
      if (id_ === undefined || id_ === null) {
        throw new Error("Missing the required parameter 'id_' when calling getRandomNumber");
      }


      let pathParams = {
        'id_': id_
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RandomNumber;

      return this.apiClient.callApi(
        '/random_number/{id_}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find draw by private or public id
     * Returns a single draw
     * @param {String} id_ ID of draw to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RandomNumber}
     */
    getRandomNumber(id_) {
      return this.getRandomNumberWithHttpInfo(id_)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generates a result for an existing Draw
     * 
     * @param {String} id_ ID of draw to toss
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RandomNumber} and HTTP response
     */
    putRandomNumberWithHttpInfo(id_) {
      let postBody = null;

      // verify the required parameter 'id_' is set
      if (id_ === undefined || id_ === null) {
        throw new Error("Missing the required parameter 'id_' when calling putRandomNumber");
      }


      let pathParams = {
        'id_': id_
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RandomNumber;

      return this.apiClient.callApi(
        '/random_number/{id_}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generates a result for an existing Draw
     * 
     * @param {String} id_ ID of draw to toss
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RandomNumber}
     */
    putRandomNumber(id_) {
      return this.putRandomNumberWithHttpInfo(id_)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

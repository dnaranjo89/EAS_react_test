// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MultiValueInput Should not mutate the original value when values are removed 1`] = `
<MultiValueInput
  data-testid="MultiValueInput__field"
  delimiters={
    Array [
      "Enter",
      ",",
    ]
  }
  inputProps={
    Object {
      "data-testid": "MultiValueInput__field-input",
    }
  }
  label="Input label"
  labelDisplayList="Selected Items"
  messageEmpty="No items selected"
  name="field1"
  onChange={[MockFunction]}
  value={
    Array [
      "Value 1",
    ]
  }
>
  <div
    data-testid="MultiValueInput__field"
  >
    <WithStyles(ForwardRef)
      InputProps={
        Object {
          "endAdornment": <ForwardRef(WithStyles)
            position="end"
          >
            <Unknown
              aria-label="add"
              onClick={[Function]}
            >
              <pure(AddCircle) />
            </Unknown>
          </ForwardRef(WithStyles)>,
        }
      }
      inputProps={
        Object {
          "data-testid": "MultiValueInput__field-input",
        }
      }
      label="Input label"
      margin="normal"
      name="field1"
      onChange={[Function]}
      type="text"
      value=""
    >
      <ForwardRef
        InputProps={
          Object {
            "endAdornment": <ForwardRef(WithStyles)
              position="end"
            >
              <Unknown
                aria-label="add"
                onClick={[Function]}
              >
                <pure(AddCircle) />
              </Unknown>
            </ForwardRef(WithStyles)>,
          }
        }
        classes={
          Object {
            "root": "MuiTextField-root",
          }
        }
        inputProps={
          Object {
            "data-testid": "MultiValueInput__field-input",
          }
        }
        label="Input label"
        margin="normal"
        name="field1"
        onChange={[Function]}
        type="text"
        value=""
      >
        <WithStyles(ForwardRef(FormControl))
          className="MuiTextField-root"
          color="primary"
          disabled={false}
          error={false}
          fullWidth={false}
          margin="normal"
          required={false}
          variant="standard"
        >
          <ForwardRef(FormControl)
            className="MuiTextField-root"
            classes={
              Object {
                "fullWidth": "MuiFormControl-fullWidth",
                "marginDense": "MuiFormControl-marginDense",
                "marginNormal": "MuiFormControl-marginNormal",
                "root": "MuiFormControl-root",
              }
            }
            color="primary"
            disabled={false}
            error={false}
            fullWidth={false}
            margin="normal"
            required={false}
            variant="standard"
          >
            <div
              className="MuiFormControl-root MuiTextField-root MuiFormControl-marginNormal"
            >
              <WithStyles(ForwardRef(Typography))
                component="label"
                variant="h3"
              >
                <ForwardRef(Typography)
                  classes={
                    Object {
                      "alignCenter": "MuiTypography-alignCenter",
                      "alignJustify": "MuiTypography-alignJustify",
                      "alignLeft": "MuiTypography-alignLeft",
                      "alignRight": "MuiTypography-alignRight",
                      "body1": "MuiTypography-body1",
                      "body2": "MuiTypography-body2",
                      "button": "MuiTypography-button",
                      "caption": "MuiTypography-caption",
                      "colorError": "MuiTypography-colorError",
                      "colorInherit": "MuiTypography-colorInherit",
                      "colorPrimary": "MuiTypography-colorPrimary",
                      "colorSecondary": "MuiTypography-colorSecondary",
                      "colorTextPrimary": "MuiTypography-colorTextPrimary",
                      "colorTextSecondary": "MuiTypography-colorTextSecondary",
                      "displayBlock": "MuiTypography-displayBlock",
                      "displayInline": "MuiTypography-displayInline",
                      "gutterBottom": "MuiTypography-gutterBottom",
                      "h1": "MuiTypography-h1",
                      "h2": "MuiTypography-h2",
                      "h3": "MuiTypography-h3",
                      "h4": "MuiTypography-h4",
                      "h5": "MuiTypography-h5",
                      "h6": "MuiTypography-h6",
                      "noWrap": "MuiTypography-noWrap",
                      "overline": "MuiTypography-overline",
                      "paragraph": "MuiTypography-paragraph",
                      "root": "MuiTypography-root",
                      "srOnly": "MuiTypography-srOnly",
                      "subtitle1": "MuiTypography-subtitle1",
                      "subtitle2": "MuiTypography-subtitle2",
                    }
                  }
                  component="label"
                  variant="h3"
                >
                  <label
                    className="MuiTypography-root MuiTypography-h3"
                  >
                    Input label
                  </label>
                </ForwardRef(Typography)>
              </WithStyles(ForwardRef(Typography))>
              <WithStyles(ForwardRef(Input))
                autoFocus={false}
                endAdornment={
                  <ForwardRef(WithStyles)
                    position="end"
                  >
                    <Unknown
                      aria-label="add"
                      onClick={[Function]}
                    >
                      <pure(AddCircle) />
                    </Unknown>
                  </ForwardRef(WithStyles)>
                }
                fullWidth={false}
                inputProps={
                  Object {
                    "data-hj-whitelist": true,
                    "data-testid": "MultiValueInput__field-input",
                  }
                }
                multiline={false}
                name="field1"
                onChange={[Function]}
                type="text"
                value=""
              >
                <ForwardRef(Input)
                  autoFocus={false}
                  classes={
                    Object {
                      "colorSecondary": "MuiInput-colorSecondary",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "formControl": "MuiInput-formControl",
                      "fullWidth": "MuiInput-fullWidth",
                      "input": "MuiInput-input",
                      "inputMarginDense": "MuiInput-inputMarginDense",
                      "inputMultiline": "MuiInput-inputMultiline",
                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                      "multiline": "MuiInput-multiline",
                      "root": "MuiInput-root",
                      "underline": "MuiInput-underline",
                    }
                  }
                  endAdornment={
                    <ForwardRef(WithStyles)
                      position="end"
                    >
                      <Unknown
                        aria-label="add"
                        onClick={[Function]}
                      >
                        <pure(AddCircle) />
                      </Unknown>
                    </ForwardRef(WithStyles)>
                  }
                  fullWidth={false}
                  inputProps={
                    Object {
                      "data-hj-whitelist": true,
                      "data-testid": "MultiValueInput__field-input",
                    }
                  }
                  multiline={false}
                  name="field1"
                  onChange={[Function]}
                  type="text"
                  value=""
                >
                  <WithStyles(ForwardRef(InputBase))
                    autoFocus={false}
                    classes={
                      Object {
                        "colorSecondary": "MuiInput-colorSecondary",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "formControl": "MuiInput-formControl",
                        "fullWidth": "MuiInput-fullWidth",
                        "input": "MuiInput-input",
                        "inputMarginDense": "MuiInput-inputMarginDense",
                        "inputMultiline": "MuiInput-inputMultiline",
                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                        "multiline": "MuiInput-multiline",
                        "root": "MuiInput-root MuiInput-underline",
                        "underline": null,
                      }
                    }
                    endAdornment={
                      <ForwardRef(WithStyles)
                        position="end"
                      >
                        <Unknown
                          aria-label="add"
                          onClick={[Function]}
                        >
                          <pure(AddCircle) />
                        </Unknown>
                      </ForwardRef(WithStyles)>
                    }
                    fullWidth={false}
                    inputComponent="input"
                    inputProps={
                      Object {
                        "data-hj-whitelist": true,
                        "data-testid": "MultiValueInput__field-input",
                      }
                    }
                    multiline={false}
                    name="field1"
                    onChange={[Function]}
                    type="text"
                    value=""
                  >
                    <ForwardRef(InputBase)
                      autoFocus={false}
                      classes={
                        Object {
                          "adornedEnd": "MuiInputBase-adornedEnd",
                          "adornedStart": "MuiInputBase-adornedStart",
                          "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                          "disabled": "Mui-disabled Mui-disabled",
                          "error": "Mui-error Mui-error",
                          "focused": "Mui-focused Mui-focused",
                          "formControl": "MuiInputBase-formControl MuiInput-formControl",
                          "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                          "input": "MuiInputBase-input MuiInput-input",
                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                          "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                          "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                          "inputSelect": "MuiInputBase-inputSelect",
                          "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                          "marginDense": "MuiInputBase-marginDense",
                          "multiline": "MuiInputBase-multiline MuiInput-multiline",
                          "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                        }
                      }
                      endAdornment={
                        <ForwardRef(WithStyles)
                          position="end"
                        >
                          <Unknown
                            aria-label="add"
                            onClick={[Function]}
                          >
                            <pure(AddCircle) />
                          </Unknown>
                        </ForwardRef(WithStyles)>
                      }
                      fullWidth={false}
                      inputComponent="input"
                      inputProps={
                        Object {
                          "data-hj-whitelist": true,
                          "data-testid": "MultiValueInput__field-input",
                        }
                      }
                      multiline={false}
                      name="field1"
                      onChange={[Function]}
                      type="text"
                      value=""
                    >
                      <div
                        className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                        onClick={[Function]}
                      >
                        <input
                          aria-invalid={false}
                          autoFocus={false}
                          className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                          data-hj-whitelist={true}
                          data-testid="MultiValueInput__field-input"
                          disabled={false}
                          name="field1"
                          onAnimationStart={[Function]}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          required={false}
                          type="text"
                          value=""
                        />
                        <WithStyles(ForwardRef(InputAdornment))
                          position="end"
                        >
                          <ForwardRef(InputAdornment)
                            classes={
                              Object {
                                "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                "filled": "MuiInputAdornment-filled",
                                "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                "marginDense": "MuiInputAdornment-marginDense",
                                "positionEnd": "MuiInputAdornment-positionEnd",
                                "positionStart": "MuiInputAdornment-positionStart",
                                "root": "MuiInputAdornment-root",
                              }
                            }
                            position="end"
                          >
                            <div
                              className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                            >
                              <Component
                                aria-label="add"
                                onClick={[Function]}
                              >
                                <div
                                  aria-label="add"
                                  data-testid="AddValueIcon"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(IconButton))>
                                    <ForwardRef(IconButton)
                                      classes={
                                        Object {
                                          "colorInherit": "MuiIconButton-colorInherit",
                                          "colorPrimary": "MuiIconButton-colorPrimary",
                                          "colorSecondary": "MuiIconButton-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "edgeEnd": "MuiIconButton-edgeEnd",
                                          "edgeStart": "MuiIconButton-edgeStart",
                                          "label": "MuiIconButton-label",
                                          "root": "MuiIconButton-root",
                                          "sizeSmall": "MuiIconButton-sizeSmall",
                                        }
                                      }
                                    >
                                      <WithStyles(ForwardRef(ButtonBase))
                                        centerRipple={true}
                                        className="MuiIconButton-root"
                                        disabled={false}
                                        focusRipple={true}
                                      >
                                        <ForwardRef(ButtonBase)
                                          centerRipple={true}
                                          className="MuiIconButton-root"
                                          classes={
                                            Object {
                                              "disabled": "Mui-disabled",
                                              "focusVisible": "Mui-focusVisible",
                                              "root": "MuiButtonBase-root",
                                            }
                                          }
                                          disabled={false}
                                          focusRipple={true}
                                        >
                                          <button
                                            className="MuiButtonBase-root MuiIconButton-root"
                                            disabled={false}
                                            onBlur={[Function]}
                                            onDragLeave={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            onMouseDown={[Function]}
                                            onMouseLeave={[Function]}
                                            onMouseUp={[Function]}
                                            onTouchEnd={[Function]}
                                            onTouchMove={[Function]}
                                            onTouchStart={[Function]}
                                            tabIndex={0}
                                            type="button"
                                          >
                                            <span
                                              className="MuiIconButton-label"
                                            />
                                            <NoSsr>
                                              <WithStyles(undefined)
                                                center={true}
                                              >
                                                <ForwardRef(TouchRipple)
                                                  center={true}
                                                  classes={
                                                    Object {
                                                      "child": "MuiTouchRipple-child",
                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                      "ripple": "MuiTouchRipple-ripple",
                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                      "root": "MuiTouchRipple-root",
                                                    }
                                                  }
                                                >
                                                  <span
                                                    className="MuiTouchRipple-root"
                                                  >
                                                    <TransitionGroup
                                                      childFactory={[Function]}
                                                      component={null}
                                                      exit={true}
                                                    />
                                                  </span>
                                                </ForwardRef(TouchRipple)>
                                              </WithStyles(undefined)>
                                            </NoSsr>
                                          </button>
                                        </ForwardRef(ButtonBase)>
                                      </WithStyles(ForwardRef(ButtonBase))>
                                    </ForwardRef(IconButton)>
                                  </WithStyles(ForwardRef(IconButton))>
                                </div>
                              </Component>
                            </div>
                          </ForwardRef(InputAdornment)>
                        </WithStyles(ForwardRef(InputAdornment))>
                      </div>
                    </ForwardRef(InputBase)>
                  </WithStyles(ForwardRef(InputBase))>
                </ForwardRef(Input)>
              </WithStyles(ForwardRef(Input))>
            </div>
          </ForwardRef(FormControl)>
        </WithStyles(ForwardRef(FormControl))>
      </ForwardRef>
    </WithStyles(ForwardRef)>
    <MultiValueDisplay
      allowDelete={true}
      label="Selected Items"
      messageEmpty="No items selected"
      onDelete={[Function]}
      values={
        Array [
          "Value 1",
        ]
      }
    >
      <div
        className="MultiValueDisplay"
        data-testid="MultiValueDisplay"
      >
        <WithStyles(ForwardRef(Typography))
          color="textSecondary"
          variant="caption"
        >
          <ForwardRef(Typography)
            classes={
              Object {
                "alignCenter": "MuiTypography-alignCenter",
                "alignJustify": "MuiTypography-alignJustify",
                "alignLeft": "MuiTypography-alignLeft",
                "alignRight": "MuiTypography-alignRight",
                "body1": "MuiTypography-body1",
                "body2": "MuiTypography-body2",
                "button": "MuiTypography-button",
                "caption": "MuiTypography-caption",
                "colorError": "MuiTypography-colorError",
                "colorInherit": "MuiTypography-colorInherit",
                "colorPrimary": "MuiTypography-colorPrimary",
                "colorSecondary": "MuiTypography-colorSecondary",
                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                "displayBlock": "MuiTypography-displayBlock",
                "displayInline": "MuiTypography-displayInline",
                "gutterBottom": "MuiTypography-gutterBottom",
                "h1": "MuiTypography-h1",
                "h2": "MuiTypography-h2",
                "h3": "MuiTypography-h3",
                "h4": "MuiTypography-h4",
                "h5": "MuiTypography-h5",
                "h6": "MuiTypography-h6",
                "noWrap": "MuiTypography-noWrap",
                "overline": "MuiTypography-overline",
                "paragraph": "MuiTypography-paragraph",
                "root": "MuiTypography-root",
                "srOnly": "MuiTypography-srOnly",
                "subtitle1": "MuiTypography-subtitle1",
                "subtitle2": "MuiTypography-subtitle2",
              }
            }
            color="textSecondary"
            variant="caption"
          >
            <span
              className="MuiTypography-root MuiTypography-caption MuiTypography-colorTextSecondary"
            >
              Selected Items
            </span>
          </ForwardRef(Typography)>
        </WithStyles(ForwardRef(Typography))>
        <div
          className="MultiValueDisplay__values-list"
        >
          <WithStyles(ForwardRef(Chip))
            data-testid="MultiValueDisplay__chip"
            key="1"
            label="Value 1"
            onDelete={[Function]}
          >
            <ForwardRef(Chip)
              classes={
                Object {
                  "avatar": "MuiChip-avatar",
                  "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                  "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                  "avatarSmall": "MuiChip-avatarSmall",
                  "clickable": "MuiChip-clickable",
                  "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                  "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                  "colorPrimary": "MuiChip-colorPrimary",
                  "colorSecondary": "MuiChip-colorSecondary",
                  "deletable": "MuiChip-deletable",
                  "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                  "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                  "deleteIcon": "MuiChip-deleteIcon",
                  "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                  "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                  "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                  "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                  "deleteIconSmall": "MuiChip-deleteIconSmall",
                  "disabled": "Mui-disabled",
                  "icon": "MuiChip-icon",
                  "iconColorPrimary": "MuiChip-iconColorPrimary",
                  "iconColorSecondary": "MuiChip-iconColorSecondary",
                  "iconSmall": "MuiChip-iconSmall",
                  "label": "MuiChip-label",
                  "labelSmall": "MuiChip-labelSmall",
                  "outlined": "MuiChip-outlined",
                  "outlinedPrimary": "MuiChip-outlinedPrimary",
                  "outlinedSecondary": "MuiChip-outlinedSecondary",
                  "root": "MuiChip-root",
                  "sizeSmall": "MuiChip-sizeSmall",
                }
              }
              data-testid="MultiValueDisplay__chip"
              label="Value 1"
              onDelete={[Function]}
            >
              <div
                className="MuiChip-root MuiChip-deletable"
                data-testid="MultiValueDisplay__chip"
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                role="button"
                tabIndex={0}
              >
                <span
                  className="MuiChip-label"
                >
                  Value 1
                </span>
                <ForwardRef
                  className="MuiChip-deleteIcon"
                  onClick={[Function]}
                >
                  <WithStyles(ForwardRef(SvgIcon))
                    className="MuiChip-deleteIcon"
                    onClick={[Function]}
                  >
                    <ForwardRef(SvgIcon)
                      className="MuiChip-deleteIcon"
                      classes={
                        Object {
                          "colorAction": "MuiSvgIcon-colorAction",
                          "colorDisabled": "MuiSvgIcon-colorDisabled",
                          "colorError": "MuiSvgIcon-colorError",
                          "colorPrimary": "MuiSvgIcon-colorPrimary",
                          "colorSecondary": "MuiSvgIcon-colorSecondary",
                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                          "root": "MuiSvgIcon-root",
                        }
                      }
                      onClick={[Function]}
                    >
                      <svg
                        aria-hidden="true"
                        className="MuiSvgIcon-root MuiChip-deleteIcon"
                        focusable="false"
                        onClick={[Function]}
                        role="presentation"
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
                        />
                      </svg>
                    </ForwardRef(SvgIcon)>
                  </WithStyles(ForwardRef(SvgIcon))>
                </ForwardRef>
              </div>
            </ForwardRef(Chip)>
          </WithStyles(ForwardRef(Chip))>
        </div>
      </div>
    </MultiValueDisplay>
  </div>
</MultiValueInput>
`;

exports[`MultiValueInput Should render correctly with values 1`] = `
<div
  data-testid=""
>
  <WithStyles(ForwardRef)
    InputProps={
      Object {
        "endAdornment": <ForwardRef(WithStyles)
          position="end"
        >
          <Unknown
            aria-label="add"
            onClick={[Function]}
          >
            <pure(AddCircle) />
          </Unknown>
        </ForwardRef(WithStyles)>,
      }
    }
    label="Input label"
    margin="normal"
    name="field1"
    onChange={[Function]}
    type="text"
    value=""
  />
  <MultiValueDisplay
    allowDelete={true}
    label="Selected Items"
    messageEmpty="No items selected"
    onDelete={[Function]}
    values={
      Array [
        "value 1",
        "value 2",
      ]
    }
  />
</div>
`;

exports[`MultiValueInput Should render correctly without values 1`] = `
<div
  data-testid=""
>
  <WithStyles(ForwardRef)
    InputProps={
      Object {
        "endAdornment": <ForwardRef(WithStyles)
          position="end"
        >
          <Unknown
            aria-label="add"
            onClick={[Function]}
          >
            <pure(AddCircle) />
          </Unknown>
        </ForwardRef(WithStyles)>,
      }
    }
    label="Input label"
    margin="normal"
    name="field1"
    onChange={[Function]}
    type="text"
    value=""
  />
  <MultiValueDisplay
    allowDelete={true}
    label="Selected Items"
    messageEmpty="No items selected"
    onDelete={[Function]}
    values={Array []}
  />
</div>
`;
